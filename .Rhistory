library(mvcaWISKI)
devtools::document()
library(mvcaWISKI)
devtools::document()
library(mvcaWISKI)
input <- read.csv(file=file.path("data", "mvca_wiski_timeseries.csv"), header=TRUE, sep = ",", dec = ".")
timeseries <- fread(input)
devtools::load_all(".")
input <- read.csv(file=file.path("data", "mvca_wiski_timeseries.csv"), header=TRUE, sep = ",", dec = ".")
timeseries <- fread(input)
ki_timeseries_values(
ts_id = "1125831042",
start_date = "2015-12-01",
end_date = "2018-01-01"
)
ki_timeseries_values(
ts_id = "359042",
start_date = "2015-12-01",
end_date = "2018-01-01"
)
input <- read.csv(file=file.path("data", "mvca_wiski_timeseries.csv"), header=TRUE, sep = ",", dec = ".")
View(input)
parameters <- unique(input$Parameter)
parameters
parameter <- select.list(parameters, title = "Select Parameter")
# Load the CSV file #
input <- read.csv(file=file.path("data", "mvca_wiski_timeseries.csv"), header=TRUE, sep = ",", dec = ".")
# Narrow down the timeseries list by filtering for the parameter #
inputAfterParameter <- input[col4 == parameter, ]
# Narrow down the timeseries list by filtering for the parameter #
inputAfterParameter <- input[Parameter == parameter, ]
# Narrow down the timeseries list by filtering for the parameter #
inputAfterParameter <- input[input$Parameter == parameter, ]
# Select the station #
stations <- unique(inputAfterParameter$Station)
station <- select.list(stations, title = "Select a Station")
sort(parameters)
parameters <- sort(parameters)
parameters <- sort(unique(input$Parameter))
# Select the station #
stations <- sort(unique(inputAfterParameter$Station))
# Select the period #
periods <- sort(unique(inputAfterStation$TS.Name))
# Narrow down the timeseries list further by filtering for the station #
inputAfterStation <- inputAfterParameter[inputAfterParameter$Station == station, ]
# Select the period #
periods <- sort(unique(inputAfterStation$TS.Name))
period <- select.list(periods, title = "Select a Period")
# Get the ts details and call in a variable #
timeseries <- inputAfterStation[inputAfterStation$TS.Name == period, ]
View(timeseries)
# Clear environment
rm(list = ls())
# Clear plots
dev.off()  # Only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# Load the CSV file #
input <- read.csv(file=file.path("data", "mvca_wiski_timeseries.csv"), header=TRUE, sep = ",", dec = ".")
# Select the parameter #
parameters <- sort(unique(input$Parameter))
parameter <- select.list(parameters, title = "Select a Parameter")
# Narrow down the timeseries list by filtering for the parameter #
inputAfterParameter <- input[input$Parameter == parameter, ]
# Select the station #
stations <- sort(unique(inputAfterParameter$Station))
station <- select.list(stations, title = "Select a Station")
# Narrow down the timeseries list further by filtering for the station #
inputAfterStation <- inputAfterParameter[inputAfterParameter$Station == station, ]
# Select the period #
periods <- sort(unique(inputAfterStation$TS.Name))
period <- select.list(periods, title = "Select a Period")
# Get the ts details and call in a variable #
timeseries <- inputAfterStation[inputAfterStation$TS.Name == period, ]
tsID <- timeseries$ts_id
tsID <- timeseries$TS.ID
View(timeseries)
View(timeseries)
tsID <- timeseries$TS.ID
ki_timeseries_values(
ts_id = timeseries$TS.ID,
start_date = "2015-12-01",
end_date = "2018-01-01"
)
library(mvcaWISKI)
ki_timeseries_values(
ts_id = timeseries$TS.ID,
start_date = "2015-12-01",
end_date = "2018-01-01"
)
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, daterangepicker)
daterangepicker(
inputId = NULL,
label = "Select a Date",
start = NULL,
end = NULL,
min = NULL,
max = NULL,
ranges = NULL,
rangeNames = names(ranges),
language = "en",
style = "width:100%;border-radius:4px;text-align:center;",
class = NULL,
icon = NULL,
options = daterangepickerOptions()
)
devtools::load_all(".")
devtools::load_all(".")
values <- get_timeseries_values()
values
View(values)
# Clear environment
rm(list = ls())
# Clear plots
dev.off()  # Only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
devtools::load_all(".")
install.packages(c("BH", "blob", "broom", "bslib", "cachem", "caret", "cli", "clock", "collections", "commonmark", "curl", "data.table", "dbplyr", "dplyr", "dtplyr", "e1071", "evaluate", "fastmap", "fontawesome", "forcats", "fs", "future", "future.apply", "gargle", "ggvis", "googledrive", "googlesheets4", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpgd", "httpuv", "httr", "ipred", "knitr", "languageserver", "later", "lava", "lubridate", "modelr", "openssl", "openxlsx", "parallelly", "pkgbuild", "plotly", "pROC", "processx", "prodlim", "ps", "psych", "purrr", "Rcpp", "readr", "readxl", "recipes", "rmarkdown", "sass", "sourcetools", "stringi", "styler", "sys", "testthat", "tidyr", "tidyverse", "timechange", "tinytex", "tzdb", "vctrs", "vroom", "xfun", "XML", "xml2", "yaml", "zip"))
# Detatch all packages
rm(list = ls(all = TRUE))
install.packages(c("BH", "blob", "broom", "bslib", "cachem", "caret", "cli", "clock", "collections", "commonmark", "curl", "data.table", "dbplyr", "dplyr", "dtplyr", "e1071", "evaluate", "fastmap", "fontawesome", "forcats", "fs", "future", "future.apply", "gargle", "ggvis", "googledrive", "googlesheets4", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpgd", "httpuv", "httr", "ipred", "knitr", "languageserver", "later", "lava", "lubridate", "modelr", "openssl", "openxlsx", "parallelly", "pkgbuild", "plotly", "pROC", "processx", "prodlim", "ps", "psych", "purrr", "Rcpp", "readr", "readxl", "recipes", "rmarkdown", "sass", "sourcetools", "stringi", "styler", "sys", "testthat", "tidyr", "tidyverse", "timechange", "tinytex", "tzdb", "vctrs", "vroom", "xfun", "XML", "xml2", "yaml", "zip"))
install.packages(c("BH", "blob", "broom", "bslib", "cachem", "caret", "cli", "clock", "collections", "commonmark", "curl", "data.table", "dbplyr", "dplyr", "dtplyr", "e1071", "evaluate", "fastmap", "fontawesome", "forcats", "fs", "future", "future.apply", "gargle", "ggvis", "googledrive", "googlesheets4", "hardhat", "haven", "hms", "htmltools", "htmlwidgets", "httpgd", "httpuv", "httr", "ipred", "knitr", "languageserver", "later", "lava", "lubridate", "modelr", "openssl", "openxlsx", "parallelly", "pkgbuild", "plotly", "pROC", "processx", "prodlim", "ps", "psych", "purrr", "Rcpp", "readr", "readxl", "recipes", "rmarkdown", "sass", "sourcetools", "stringi", "styler", "sys", "testthat", "tidyr", "tidyverse", "timechange", "tinytex", "tzdb", "vctrs", "vroom", "xfun", "XML", "xml2", "yaml", "zip"))
devtools::load_all(".")
#Load library: Ctrl + Shift + L
devtools::document()
#Load library: Ctrl + Shift + L
devtools::document()
usethis::use_tidy_description()
# Clear console
cat("\014")  # ctrl+L
values <- get_timeseries_values()
values
